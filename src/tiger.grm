%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program
%nonassoc THEN DO TYPE FUNCTION ID
%nonassoc ASSIGN LBRACK ELSE OF
%left OR
%left AND
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%
program:	  exp
			;

exp:		/* empty */
			| condexp
			| resultexp
			| BREAK
			;

resultexp:	  assignexp
			| letexp
			;
			
arraycreate:  ID LBRACK resultexp RBRACK OF exp
			;
			
recocreate:	  ID LBRACE arglist RBRACE
			;

letexp:		  LET decs IN expseq END
			;

arglist:	/* empty */
			| nonarglist
			;
			
nonarglist:   eqexp
			| nonarglist COMMA eqexp
			;
			
assignexp:	  orexp
			| lvalue ASSIGN assignexp
			;


orexp:		  andexp
			| orexp OR andexp
			;
			
andexp:		  eqexp
			| andexp AND eqexp
			;
			
eqexp:		  cmpexp
			| eqexp EQ cmpexp
			| eqexp NEQ cmpexp
			;

cmpexp:		  addexp
			| arraycreate
			| recocreate
			| cmpexp LT addexp
			| cmpexp GT addexp
			| cmpexp LE addexp
			| cmpexp GE addexp
			;
addexp:		  mulexp
			| addexp PLUS mulexp
			| addexp MINUS mulexp
			;
			
mulexp:		  unaryexp
			| mulexp TIMES unaryexp
			| mulexp DIVIDE unaryexp
			;
			
unaryexp:	  postexp
			| MINUS unaryexp %prec MINUS
			;
			
postexp:	  primexp
			| lvalue
			| funcall
			;
			
primexp:	  INT
			| STRING
			| NIL
			| LPAREN expseq RPAREN
			;

funcall:	  ID LPAREN arglist RPAREN
			;
			
lvalue:		  ID
			| ID LBRACK resultexp RBRACK %prec LBRACK
			| lvalue LBRACK resultexp RBRACK
			| lvalue DOT ID
			;

expseq:		  exp
			| expseq SEMICOLON exp
			;

			
condexp:	  IF orexp THEN exp ELSE exp
			| IF orexp THEN exp
			| WHILE orexp DO exp
			| FOR ID ASSIGN orexp TO orexp DO exp
			;
			
decs:		/* empty */
			| decs dec
			;

dec:		  tydec
			| vardec
			| fundec
			;
			
tydec:		  TYPE ID EQ ty
			;

ty:			  ID
			| LBRACE tyfields RBRACE
			| ARRAY OF ID
			;

tyfields:	  /* empty */
			|  tyfields1
			;

tyfields1:	  tyfield
			| tyfields1 COMMA tyfield
			;

tyfield:	  ID COLON ID
			;

vardec:		  VAR ID ASSIGN exp
			| VAR ID COLON ID ASSIGN exp
			;

fundec:		  FUNCTION ID LPAREN tyfields RPAREN EQ exp
			| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
			;
