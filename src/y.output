Terminals unused in grammar

   UMINUS


State 19 conflicts: 1 shift/reduce
State 20 conflicts: 1 shift/reduce
State 21 conflicts: 2 shift/reduce
State 22 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: /* empty */
    3    | condexp
    4    | resultexp
    5    | BREAK

    6 resultexp: assignexp
    7          | letexp

    8 arraycreate: ID LBRACK resultexp RBRACK OF exp

    9 recocreate: ID LBRACE arglist RBRACE

   10 letexp: LET decs IN expseq END

   11 arglist: /* empty */
   12        | nonarglist

   13 nonarglist: eqexp
   14           | nonarglist COMMA eqexp

   15 assignexp: orexp
   16          | lvalue ASSIGN assignexp

   17 orexp: andexp
   18      | orexp OR andexp

   19 andexp: eqexp
   20       | andexp AND eqexp

   21 eqexp: cmpexp
   22      | eqexp EQ cmpexp
   23      | eqexp NEQ cmpexp

   24 cmpexp: addexp
   25       | arraycreate
   26       | recocreate
   27       | cmpexp LT addexp
   28       | cmpexp GT addexp
   29       | cmpexp LE addexp
   30       | cmpexp GE addexp

   31 addexp: mulexp
   32       | addexp PLUS mulexp
   33       | addexp MINUS mulexp

   34 mulexp: unaryexp
   35       | mulexp TIMES unaryexp
   36       | mulexp DIVIDE unaryexp

   37 unaryexp: postexp
   38         | MINUS unaryexp

   39 postexp: primexp
   40        | lvalue
   41        | funcall

   42 primexp: INT
   43        | STRING
   44        | NIL
   45        | LPAREN expseq RPAREN

   46 funcall: ID LPAREN arglist RPAREN

   47 lvalue: ID
   48       | ID LBRACK resultexp RBRACK
   49       | lvalue LBRACK resultexp RBRACK
   50       | lvalue DOT ID

   51 expseq: exp
   52       | expseq SEMICOLON exp

   53 condexp: IF orexp THEN exp ELSE exp
   54        | IF orexp THEN exp
   55        | WHILE orexp DO exp
   56        | FOR ID ASSIGN orexp TO orexp DO exp

   57 decs: /* empty */
   58     | decs dec

   59 dec: tydec
   60    | vardec
   61    | fundec

   62 tydec: TYPE ID EQ ty

   63 ty: ID
   64   | LBRACE tyfields RBRACE
   65   | ARRAY OF ID

   66 tyfields: /* empty */
   67         | tyfields1

   68 tyfields1: tyfield
   69          | tyfields1 COMMA tyfield

   70 tyfield: ID COLON ID

   71 vardec: VAR ID ASSIGN exp
   72       | VAR ID COLON ID ASSIGN exp

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   74       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 9 46 47 48 50 56 62 63 65 70 71 72 73 74
STRING (259) 43
INT (260) 42
COMMA (261) 14 69
COLON (262) 70 72 74
SEMICOLON (263) 52
LPAREN (264) 45 46 73 74
RPAREN (265) 45 46 73 74
LBRACK (266) 8 48 49
RBRACK (267) 8 48 49
LBRACE (268) 9 64
RBRACE (269) 9 64
DOT (270) 50
PLUS (271) 32
MINUS (272) 33 38
TIMES (273) 35
DIVIDE (274) 36
EQ (275) 22 62 73 74
NEQ (276) 23
LT (277) 27
LE (278) 29
GT (279) 28
GE (280) 30
AND (281) 20
OR (282) 18
ASSIGN (283) 16 56 71 72
ARRAY (284) 65
IF (285) 53 54
THEN (286) 53 54
ELSE (287) 53
WHILE (288) 55
FOR (289) 56
TO (290) 56
DO (291) 55 56
LET (292) 10
IN (293) 10
END (294) 10
OF (295) 8 65
BREAK (296) 5
NIL (297) 44
FUNCTION (298) 73 74
VAR (299) 71 72
TYPE (300) 62
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
exp (49)
    on left: 2 3 4 5, on right: 1 8 51 52 53 54 55 56 71 72 73 74
resultexp (50)
    on left: 6 7, on right: 4 8 48 49
arraycreate (51)
    on left: 8, on right: 25
recocreate (52)
    on left: 9, on right: 26
letexp (53)
    on left: 10, on right: 7
arglist (54)
    on left: 11 12, on right: 9 46
nonarglist (55)
    on left: 13 14, on right: 12 14
assignexp (56)
    on left: 15 16, on right: 6 16
orexp (57)
    on left: 17 18, on right: 15 18 53 54 55 56
andexp (58)
    on left: 19 20, on right: 17 18 20
eqexp (59)
    on left: 21 22 23, on right: 13 14 19 20 22 23
cmpexp (60)
    on left: 24 25 26 27 28 29 30, on right: 21 22 23 27 28 29 30
addexp (61)
    on left: 31 32 33, on right: 24 27 28 29 30 32 33
mulexp (62)
    on left: 34 35 36, on right: 31 32 33 35 36
unaryexp (63)
    on left: 37 38, on right: 34 35 36 38
postexp (64)
    on left: 39 40 41, on right: 37
primexp (65)
    on left: 42 43 44 45, on right: 39
funcall (66)
    on left: 46, on right: 41
lvalue (67)
    on left: 47 48 49 50, on right: 16 40 49 50
expseq (68)
    on left: 51 52, on right: 10 45 52
condexp (69)
    on left: 53 54 55 56, on right: 3
decs (70)
    on left: 57 58, on right: 10 58
dec (71)
    on left: 59 60 61, on right: 58
tydec (72)
    on left: 62, on right: 59
ty (73)
    on left: 63 64 65, on right: 62
tyfields (74)
    on left: 66 67, on right: 64 73 74
tyfields1 (75)
    on left: 68 69, on right: 67 69
tyfield (76)
    on left: 70, on right: 68 69
vardec (77)
    on left: 71 72, on right: 60
fundec (78)
    on left: 73 74, on right: 61


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    program      go to state 12
    exp          go to state 13
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 1

    8 arraycreate: ID . LBRACK resultexp RBRACK OF exp
    9 recocreate: ID . LBRACE arglist RBRACE
   46 funcall: ID . LPAREN arglist RPAREN
   47 lvalue: ID .
   48       | ID . LBRACK resultexp RBRACK

    LPAREN  shift, and go to state 31
    LBRACK  shift, and go to state 32
    LBRACE  shift, and go to state 33

    $default  reduce using rule 47 (lvalue)


state 2

   43 primexp: STRING .

    $default  reduce using rule 43 (primexp)


state 3

   42 primexp: INT .

    $default  reduce using rule 42 (primexp)


state 4

   45 primexp: LPAREN . expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 34
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    expseq       go to state 35
    condexp      go to state 30


state 5

   38 unaryexp: MINUS . unaryexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    unaryexp  go to state 37
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 6

   53 condexp: IF . orexp THEN exp ELSE exp
   54        | IF . orexp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    orexp        go to state 39
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 7

   55 condexp: WHILE . orexp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    orexp        go to state 40
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 8

   56 condexp: FOR . ID ASSIGN orexp TO orexp DO exp

    ID  shift, and go to state 41


state 9

   10 letexp: LET . decs IN expseq END

    $default  reduce using rule 57 (decs)

    decs  go to state 42


state 10

    5 exp: BREAK .

    $default  reduce using rule 5 (exp)


state 11

   44 primexp: NIL .

    $default  reduce using rule 44 (primexp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 43


state 13

    1 program: exp .

    $default  reduce using rule 1 (program)


state 14

    4 exp: resultexp .

    $default  reduce using rule 4 (exp)


state 15

   25 cmpexp: arraycreate .

    $default  reduce using rule 25 (cmpexp)


state 16

   26 cmpexp: recocreate .

    $default  reduce using rule 26 (cmpexp)


state 17

    7 resultexp: letexp .

    $default  reduce using rule 7 (resultexp)


state 18

    6 resultexp: assignexp .

    $default  reduce using rule 6 (resultexp)


state 19

   15 assignexp: orexp .
   18 orexp: orexp . OR andexp

    OR  shift, and go to state 44

    OR        [reduce using rule 15 (assignexp)]
    $default  reduce using rule 15 (assignexp)


state 20

   17 orexp: andexp .
   20 andexp: andexp . AND eqexp

    AND  shift, and go to state 45

    AND       [reduce using rule 17 (orexp)]
    $default  reduce using rule 17 (orexp)


state 21

   19 andexp: eqexp .
   22 eqexp: eqexp . EQ cmpexp
   23      | eqexp . NEQ cmpexp

    EQ   shift, and go to state 46
    NEQ  shift, and go to state 47

    EQ        [reduce using rule 19 (andexp)]
    NEQ       [reduce using rule 19 (andexp)]
    $default  reduce using rule 19 (andexp)


state 22

   21 eqexp: cmpexp .
   27 cmpexp: cmpexp . LT addexp
   28       | cmpexp . GT addexp
   29       | cmpexp . LE addexp
   30       | cmpexp . GE addexp

    LT  shift, and go to state 48
    LE  shift, and go to state 49
    GT  shift, and go to state 50
    GE  shift, and go to state 51

    LT        [reduce using rule 21 (eqexp)]
    LE        [reduce using rule 21 (eqexp)]
    GT        [reduce using rule 21 (eqexp)]
    GE        [reduce using rule 21 (eqexp)]
    $default  reduce using rule 21 (eqexp)


state 23

   24 cmpexp: addexp .
   32 addexp: addexp . PLUS mulexp
   33       | addexp . MINUS mulexp

    PLUS   shift, and go to state 52
    MINUS  shift, and go to state 53

    $default  reduce using rule 24 (cmpexp)


state 24

   31 addexp: mulexp .
   35 mulexp: mulexp . TIMES unaryexp
   36       | mulexp . DIVIDE unaryexp

    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 31 (addexp)


state 25

   34 mulexp: unaryexp .

    $default  reduce using rule 34 (mulexp)


state 26

   37 unaryexp: postexp .

    $default  reduce using rule 37 (unaryexp)


state 27

   39 postexp: primexp .

    $default  reduce using rule 39 (postexp)


state 28

   41 postexp: funcall .

    $default  reduce using rule 41 (postexp)


state 29

   16 assignexp: lvalue . ASSIGN assignexp
   40 postexp: lvalue .
   49 lvalue: lvalue . LBRACK resultexp RBRACK
   50       | lvalue . DOT ID

    LBRACK  shift, and go to state 56
    DOT     shift, and go to state 57
    ASSIGN  shift, and go to state 58

    $default  reduce using rule 40 (postexp)


state 30

    3 exp: condexp .

    $default  reduce using rule 3 (exp)


state 31

   46 funcall: ID LPAREN . arglist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    $default  reduce using rule 11 (arglist)

    arraycreate  go to state 15
    recocreate   go to state 16
    arglist      go to state 59
    nonarglist   go to state 60
    eqexp        go to state 61
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 32

    8 arraycreate: ID LBRACK . resultexp RBRACK OF exp
   48 lvalue: ID LBRACK . resultexp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    resultexp    go to state 62
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29


state 33

    9 recocreate: ID LBRACE . arglist RBRACE

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    $default  reduce using rule 11 (arglist)

    arraycreate  go to state 15
    recocreate   go to state 16
    arglist      go to state 63
    nonarglist   go to state 60
    eqexp        go to state 61
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 34

   51 expseq: exp .

    $default  reduce using rule 51 (expseq)


state 35

   45 primexp: LPAREN expseq . RPAREN
   52 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 64
    RPAREN     shift, and go to state 65


state 36

   46 funcall: ID . LPAREN arglist RPAREN
   47 lvalue: ID .
   48       | ID . LBRACK resultexp RBRACK

    LPAREN  shift, and go to state 31
    LBRACK  shift, and go to state 66

    $default  reduce using rule 47 (lvalue)


state 37

   38 unaryexp: MINUS unaryexp .

    $default  reduce using rule 38 (unaryexp)


state 38

   40 postexp: lvalue .
   49 lvalue: lvalue . LBRACK resultexp RBRACK
   50       | lvalue . DOT ID

    LBRACK  shift, and go to state 56
    DOT     shift, and go to state 57

    $default  reduce using rule 40 (postexp)


state 39

   18 orexp: orexp . OR andexp
   53 condexp: IF orexp . THEN exp ELSE exp
   54        | IF orexp . THEN exp

    OR    shift, and go to state 44
    THEN  shift, and go to state 67


state 40

   18 orexp: orexp . OR andexp
   55 condexp: WHILE orexp . DO exp

    OR  shift, and go to state 44
    DO  shift, and go to state 68


state 41

   56 condexp: FOR ID . ASSIGN orexp TO orexp DO exp

    ASSIGN  shift, and go to state 69


state 42

   10 letexp: LET decs . IN expseq END
   58 decs: decs . dec

    IN        shift, and go to state 70
    FUNCTION  shift, and go to state 71
    VAR       shift, and go to state 72
    TYPE      shift, and go to state 73

    dec     go to state 74
    tydec   go to state 75
    vardec  go to state 76
    fundec  go to state 77


state 43

    0 $accept: program $end .

    $default  accept


state 44

   18 orexp: orexp OR . andexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    andexp       go to state 78
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 45

   20 andexp: andexp AND . eqexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    eqexp        go to state 79
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 46

   22 eqexp: eqexp EQ . cmpexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    cmpexp       go to state 80
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 47

   23 eqexp: eqexp NEQ . cmpexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    cmpexp       go to state 81
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 48

   27 cmpexp: cmpexp LT . addexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    addexp    go to state 82
    mulexp    go to state 24
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 49

   29 cmpexp: cmpexp LE . addexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    addexp    go to state 83
    mulexp    go to state 24
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 50

   28 cmpexp: cmpexp GT . addexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    addexp    go to state 84
    mulexp    go to state 24
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 51

   30 cmpexp: cmpexp GE . addexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    addexp    go to state 85
    mulexp    go to state 24
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 52

   32 addexp: addexp PLUS . mulexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    mulexp    go to state 86
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 53

   33 addexp: addexp MINUS . mulexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    mulexp    go to state 87
    unaryexp  go to state 25
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 54

   35 mulexp: mulexp TIMES . unaryexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    unaryexp  go to state 88
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 55

   36 mulexp: mulexp DIVIDE . unaryexp

    ID      shift, and go to state 36
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    unaryexp  go to state 89
    postexp   go to state 26
    primexp   go to state 27
    funcall   go to state 28
    lvalue    go to state 38


state 56

   49 lvalue: lvalue LBRACK . resultexp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    resultexp    go to state 90
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29


state 57

   50 lvalue: lvalue DOT . ID

    ID  shift, and go to state 91


state 58

   16 assignexp: lvalue ASSIGN . assignexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    assignexp    go to state 92
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29


state 59

   46 funcall: ID LPAREN arglist . RPAREN

    RPAREN  shift, and go to state 93


state 60

   12 arglist: nonarglist .
   14 nonarglist: nonarglist . COMMA eqexp

    COMMA  shift, and go to state 94

    $default  reduce using rule 12 (arglist)


state 61

   13 nonarglist: eqexp .
   22 eqexp: eqexp . EQ cmpexp
   23      | eqexp . NEQ cmpexp

    EQ   shift, and go to state 46
    NEQ  shift, and go to state 47

    $default  reduce using rule 13 (nonarglist)


state 62

    8 arraycreate: ID LBRACK resultexp . RBRACK OF exp
   48 lvalue: ID LBRACK resultexp . RBRACK

    RBRACK  shift, and go to state 95


state 63

    9 recocreate: ID LBRACE arglist . RBRACE

    RBRACE  shift, and go to state 96


state 64

   52 expseq: expseq SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 97
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 65

   45 primexp: LPAREN expseq RPAREN .

    $default  reduce using rule 45 (primexp)


state 66

   48 lvalue: ID LBRACK . resultexp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    resultexp    go to state 98
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29


state 67

   53 condexp: IF orexp THEN . exp ELSE exp
   54        | IF orexp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 99
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 68

   55 condexp: WHILE orexp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 100
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 69

   56 condexp: FOR ID ASSIGN . orexp TO orexp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    orexp        go to state 101
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 70

   10 letexp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 34
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    expseq       go to state 102
    condexp      go to state 30


state 71

   73 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   74       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 103


state 72

   71 vardec: VAR . ID ASSIGN exp
   72       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 104


state 73

   62 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 105


state 74

   58 decs: decs dec .

    $default  reduce using rule 58 (decs)


state 75

   59 dec: tydec .

    $default  reduce using rule 59 (dec)


state 76

   60 dec: vardec .

    $default  reduce using rule 60 (dec)


state 77

   61 dec: fundec .

    $default  reduce using rule 61 (dec)


state 78

   18 orexp: orexp OR andexp .
   20 andexp: andexp . AND eqexp

    AND  shift, and go to state 45

    $default  reduce using rule 18 (orexp)


state 79

   20 andexp: andexp AND eqexp .
   22 eqexp: eqexp . EQ cmpexp
   23      | eqexp . NEQ cmpexp

    EQ   shift, and go to state 46
    NEQ  shift, and go to state 47

    $default  reduce using rule 20 (andexp)


state 80

   22 eqexp: eqexp EQ cmpexp .
   27 cmpexp: cmpexp . LT addexp
   28       | cmpexp . GT addexp
   29       | cmpexp . LE addexp
   30       | cmpexp . GE addexp

    LT  error (nonassociative)
    LE  error (nonassociative)
    GT  error (nonassociative)
    GE  error (nonassociative)

    $default  reduce using rule 22 (eqexp)


state 81

   23 eqexp: eqexp NEQ cmpexp .
   27 cmpexp: cmpexp . LT addexp
   28       | cmpexp . GT addexp
   29       | cmpexp . LE addexp
   30       | cmpexp . GE addexp

    LT  error (nonassociative)
    LE  error (nonassociative)
    GT  error (nonassociative)
    GE  error (nonassociative)

    $default  reduce using rule 23 (eqexp)


state 82

   27 cmpexp: cmpexp LT addexp .
   32 addexp: addexp . PLUS mulexp
   33       | addexp . MINUS mulexp

    PLUS   shift, and go to state 52
    MINUS  shift, and go to state 53

    $default  reduce using rule 27 (cmpexp)


state 83

   29 cmpexp: cmpexp LE addexp .
   32 addexp: addexp . PLUS mulexp
   33       | addexp . MINUS mulexp

    PLUS   shift, and go to state 52
    MINUS  shift, and go to state 53

    $default  reduce using rule 29 (cmpexp)


state 84

   28 cmpexp: cmpexp GT addexp .
   32 addexp: addexp . PLUS mulexp
   33       | addexp . MINUS mulexp

    PLUS   shift, and go to state 52
    MINUS  shift, and go to state 53

    $default  reduce using rule 28 (cmpexp)


state 85

   30 cmpexp: cmpexp GE addexp .
   32 addexp: addexp . PLUS mulexp
   33       | addexp . MINUS mulexp

    PLUS   shift, and go to state 52
    MINUS  shift, and go to state 53

    $default  reduce using rule 30 (cmpexp)


state 86

   32 addexp: addexp PLUS mulexp .
   35 mulexp: mulexp . TIMES unaryexp
   36       | mulexp . DIVIDE unaryexp

    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 32 (addexp)


state 87

   33 addexp: addexp MINUS mulexp .
   35 mulexp: mulexp . TIMES unaryexp
   36       | mulexp . DIVIDE unaryexp

    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 33 (addexp)


state 88

   35 mulexp: mulexp TIMES unaryexp .

    $default  reduce using rule 35 (mulexp)


state 89

   36 mulexp: mulexp DIVIDE unaryexp .

    $default  reduce using rule 36 (mulexp)


state 90

   49 lvalue: lvalue LBRACK resultexp . RBRACK

    RBRACK  shift, and go to state 106


state 91

   50 lvalue: lvalue DOT ID .

    $default  reduce using rule 50 (lvalue)


state 92

   16 assignexp: lvalue ASSIGN assignexp .

    $default  reduce using rule 16 (assignexp)


state 93

   46 funcall: ID LPAREN arglist RPAREN .

    $default  reduce using rule 46 (funcall)


state 94

   14 nonarglist: nonarglist COMMA . eqexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    eqexp        go to state 107
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 95

    8 arraycreate: ID LBRACK resultexp RBRACK . OF exp
   48 lvalue: ID LBRACK resultexp RBRACK .

    OF  shift, and go to state 108

    $default  reduce using rule 48 (lvalue)


state 96

    9 recocreate: ID LBRACE arglist RBRACE .

    $default  reduce using rule 9 (recocreate)


state 97

   52 expseq: expseq SEMICOLON exp .

    $default  reduce using rule 52 (expseq)


state 98

   48 lvalue: ID LBRACK resultexp . RBRACK

    RBRACK  shift, and go to state 109


state 99

   53 condexp: IF orexp THEN exp . ELSE exp
   54        | IF orexp THEN exp .

    ELSE  shift, and go to state 110

    $default  reduce using rule 54 (condexp)


state 100

   55 condexp: WHILE orexp DO exp .

    $default  reduce using rule 55 (condexp)


state 101

   18 orexp: orexp . OR andexp
   56 condexp: FOR ID ASSIGN orexp . TO orexp DO exp

    OR  shift, and go to state 44
    TO  shift, and go to state 111


state 102

   10 letexp: LET decs IN expseq . END
   52 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 64
    END        shift, and go to state 112


state 103

   73 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   74       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 113


state 104

   71 vardec: VAR ID . ASSIGN exp
   72       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 114
    ASSIGN  shift, and go to state 115


state 105

   62 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 116


state 106

   49 lvalue: lvalue LBRACK resultexp RBRACK .

    $default  reduce using rule 49 (lvalue)


state 107

   14 nonarglist: nonarglist COMMA eqexp .
   22 eqexp: eqexp . EQ cmpexp
   23      | eqexp . NEQ cmpexp

    EQ   shift, and go to state 46
    NEQ  shift, and go to state 47

    $default  reduce using rule 14 (nonarglist)


state 108

    8 arraycreate: ID LBRACK resultexp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 117
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 109

   48 lvalue: ID LBRACK resultexp RBRACK .

    $default  reduce using rule 48 (lvalue)


state 110

   53 condexp: IF orexp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 118
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 111

   56 condexp: FOR ID ASSIGN orexp TO . orexp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    arraycreate  go to state 15
    recocreate   go to state 16
    orexp        go to state 119
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 38


state 112

   10 letexp: LET decs IN expseq END .

    $default  reduce using rule 10 (letexp)


state 113

   73 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   74       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 120

    $default  reduce using rule 66 (tyfields)

    tyfields   go to state 121
    tyfields1  go to state 122
    tyfield    go to state 123


state 114

   72 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 124


state 115

   71 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 125
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 116

   62 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 126
    LBRACE  shift, and go to state 127
    ARRAY   shift, and go to state 128

    ty  go to state 129


state 117

    8 arraycreate: ID LBRACK resultexp RBRACK OF exp .

    $default  reduce using rule 8 (arraycreate)


state 118

   53 condexp: IF orexp THEN exp ELSE exp .

    $default  reduce using rule 53 (condexp)


state 119

   18 orexp: orexp . OR andexp
   56 condexp: FOR ID ASSIGN orexp TO orexp . DO exp

    OR  shift, and go to state 44
    DO  shift, and go to state 130


state 120

   70 tyfield: ID . COLON ID

    COLON  shift, and go to state 131


state 121

   73 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   74       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 132


state 122

   67 tyfields: tyfields1 .
   69 tyfields1: tyfields1 . COMMA tyfield

    COMMA  shift, and go to state 133

    $default  reduce using rule 67 (tyfields)


state 123

   68 tyfields1: tyfield .

    $default  reduce using rule 68 (tyfields1)


state 124

   72 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 134


state 125

   71 vardec: VAR ID ASSIGN exp .

    $default  reduce using rule 71 (vardec)


state 126

   63 ty: ID .

    $default  reduce using rule 63 (ty)


state 127

   64 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 120

    $default  reduce using rule 66 (tyfields)

    tyfields   go to state 135
    tyfields1  go to state 122
    tyfield    go to state 123


state 128

   65 ty: ARRAY . OF ID

    OF  shift, and go to state 136


state 129

   62 tydec: TYPE ID EQ ty .

    $default  reduce using rule 62 (tydec)


state 130

   56 condexp: FOR ID ASSIGN orexp TO orexp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 137
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 131

   70 tyfield: ID COLON . ID

    ID  shift, and go to state 138


state 132

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   74       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 139
    EQ     shift, and go to state 140


state 133

   69 tyfields1: tyfields1 COMMA . tyfield

    ID  shift, and go to state 120

    tyfield  go to state 141


state 134

   72 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 142
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 135

   64 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 143


state 136

   65 ty: ARRAY OF . ID

    ID  shift, and go to state 144


state 137

   56 condexp: FOR ID ASSIGN orexp TO orexp DO exp .

    $default  reduce using rule 56 (condexp)


state 138

   70 tyfield: ID COLON ID .

    $default  reduce using rule 70 (tyfield)


state 139

   74 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 145


state 140

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 146
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 141

   69 tyfields1: tyfields1 COMMA tyfield .

    $default  reduce using rule 69 (tyfields1)


state 142

   72 vardec: VAR ID COLON ID ASSIGN exp .

    $default  reduce using rule 72 (vardec)


state 143

   64 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 64 (ty)


state 144

   65 ty: ARRAY OF ID .

    $default  reduce using rule 65 (ty)


state 145

   74 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 147


state 146

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    $default  reduce using rule 73 (fundec)


state 147

   74 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (exp)

    exp          go to state 148
    resultexp    go to state 14
    arraycreate  go to state 15
    recocreate   go to state 16
    letexp       go to state 17
    assignexp    go to state 18
    orexp        go to state 19
    andexp       go to state 20
    eqexp        go to state 21
    cmpexp       go to state 22
    addexp       go to state 23
    mulexp       go to state 24
    unaryexp     go to state 25
    postexp      go to state 26
    primexp      go to state 27
    funcall      go to state 28
    lvalue       go to state 29
    condexp      go to state 30


state 148

   74 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    $default  reduce using rule 74 (fundec)
