Grammar

    0 $accept: program $end

    1 program: primyexp

    2 primyexp: /* empty */
    3         | exp

    4 exp: INT
    5    | STRING
    6    | NIL
    7    | ID LPAREN arglist RPAREN
    8    | lvalue
    9    | LPAREN expseq RPAREN
   10    | condexp
   11    | letexp
   12    | exp OR exp
   13    | exp AND exp
   14    | exp LT exp
   15    | exp GT exp
   16    | exp LE exp
   17    | exp GE exp
   18    | exp PLUS exp
   19    | exp MINUS exp
   20    | exp TIMES exp
   21    | exp DIVIDE exp
   22    | exp EQ exp
   23    | exp NEQ exp
   24    | ID LBRACK exp RBRACK OF exp
   25    | ID LBRACE arglist RBRACE
   26    | lvalue ASSIGN exp
   27    | MINUS exp
   28    | BREAK

   29 letexp: LET decs IN expseq END

   30 arglist: /* empty */
   31        | nonarglist

   32 nonarglist: exp
   33           | nonarglist COMMA exp

   34 lvalue: ID
   35       | ID LBRACK exp RBRACK
   36       | lvalue LBRACK exp RBRACK
   37       | lvalue DOT ID

   38 expseq: primyexp
   39       | expseq SEMICOLON primyexp

   40 condexp: IF exp THEN exp ELSE exp
   41        | IF exp THEN exp
   42        | WHILE exp DO exp
   43        | FOR ID ASSIGN exp TO exp DO exp

   44 decs: /* empty */
   45     | decs dec

   46 dec: tydec
   47    | vardec
   48    | fundec

   49 tydec: TYPE ID EQ ty

   50 ty: ID
   51   | LBRACE tyfields RBRACE
   52   | ARRAY OF ID

   53 tyfields: /* empty */
   54         | tyfields1

   55 tyfields1: tyfield
   56          | tyfields1 COMMA tyfield

   57 tyfield: ID COLON ID

   58 vardec: VAR ID ASSIGN exp
   59       | VAR ID COLON ID ASSIGN exp

   60 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   61       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 24 25 34 35 37 43 49 50 52 57 58 59 60 61
STRING (259) 5
INT (260) 4
COMMA (261) 33 56
COLON (262) 57 59 61
SEMICOLON (263) 39
LPAREN (264) 7 9 60 61
RPAREN (265) 7 9 60 61
LBRACK (266) 24 35 36
RBRACK (267) 24 35 36
LBRACE (268) 25 51
RBRACE (269) 25 51
DOT (270) 37
PLUS (271) 18
MINUS (272) 19 27
TIMES (273) 20
DIVIDE (274) 21
EQ (275) 22 49 60 61
NEQ (276) 23
LT (277) 14
LE (278) 16
GT (279) 15
GE (280) 17
AND (281) 13
OR (282) 12
ASSIGN (283) 26 43 58 59
ARRAY (284) 52
IF (285) 40 41
THEN (286) 40 41
ELSE (287) 40
WHILE (288) 42
FOR (289) 43
TO (290) 43
DO (291) 42 43
LET (292) 29
IN (293) 29
END (294) 29
OF (295) 24 52
BREAK (296) 28
NIL (297) 6
FUNCTION (298) 60 61
VAR (299) 58 59
TYPE (300) 49
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
primyexp (49)
    on left: 2 3, on right: 1 38 39
exp (50)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28, on right: 3 12 13 14 15 16 17 18 19 20 21 22 23
    24 26 27 32 33 35 36 40 41 42 43 58 59 60 61
letexp (51)
    on left: 29, on right: 11
arglist (52)
    on left: 30 31, on right: 7 25
nonarglist (53)
    on left: 32 33, on right: 31 33
lvalue (54)
    on left: 34 35 36 37, on right: 8 26 36 37
expseq (55)
    on left: 38 39, on right: 9 29 39
condexp (56)
    on left: 40 41 42 43, on right: 10
decs (57)
    on left: 44 45, on right: 29 45
dec (58)
    on left: 46 47 48, on right: 45
tydec (59)
    on left: 49, on right: 46
ty (60)
    on left: 50 51 52, on right: 49
tyfields (61)
    on left: 53 54, on right: 51 60 61
tyfields1 (62)
    on left: 55 56, on right: 54 56
tyfield (63)
    on left: 57, on right: 55 56
vardec (64)
    on left: 58 59, on right: 47
fundec (65)
    on left: 60 61, on right: 48


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (primyexp)

    program   go to state 12
    primyexp  go to state 13
    exp       go to state 14
    letexp    go to state 15
    lvalue    go to state 16
    condexp   go to state 17


state 1

    7 exp: ID . LPAREN arglist RPAREN
   24    | ID . LBRACK exp RBRACK OF exp
   25    | ID . LBRACE arglist RBRACE
   34 lvalue: ID .
   35       | ID . LBRACK exp RBRACK

    LPAREN  shift, and go to state 18
    LBRACK  shift, and go to state 19
    LBRACE  shift, and go to state 20

    $default  reduce using rule 34 (lvalue)


state 2

    5 exp: STRING .

    $default  reduce using rule 5 (exp)


state 3

    4 exp: INT .

    $default  reduce using rule 4 (exp)


state 4

    9 exp: LPAREN . expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (primyexp)

    primyexp  go to state 21
    exp       go to state 14
    letexp    go to state 15
    lvalue    go to state 16
    expseq    go to state 22
    condexp   go to state 17


state 5

   27 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 23
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 6

   40 condexp: IF . exp THEN exp ELSE exp
   41        | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 24
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 7

   42 condexp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 25
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 8

   43 condexp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 26


state 9

   29 letexp: LET . decs IN expseq END

    $default  reduce using rule 44 (decs)

    decs  go to state 27


state 10

   28 exp: BREAK .

    $default  reduce using rule 28 (exp)


state 11

    6 exp: NIL .

    $default  reduce using rule 6 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 28


state 13

    1 program: primyexp .

    $default  reduce using rule 1 (program)


state 14

    3 primyexp: exp .
   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 3 (primyexp)


state 15

   11 exp: letexp .

    $default  reduce using rule 11 (exp)


state 16

    8 exp: lvalue .
   26    | lvalue . ASSIGN exp
   36 lvalue: lvalue . LBRACK exp RBRACK
   37       | lvalue . DOT ID

    LBRACK  shift, and go to state 41
    DOT     shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 8 (exp)


state 17

   10 exp: condexp .

    $default  reduce using rule 10 (exp)


state 18

    7 exp: ID LPAREN . arglist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 30 (arglist)

    exp         go to state 44
    letexp      go to state 15
    arglist     go to state 45
    nonarglist  go to state 46
    lvalue      go to state 16
    condexp     go to state 17


state 19

   24 exp: ID LBRACK . exp RBRACK OF exp
   35 lvalue: ID LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 47
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 20

   25 exp: ID LBRACE . arglist RBRACE

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 30 (arglist)

    exp         go to state 44
    letexp      go to state 15
    arglist     go to state 48
    nonarglist  go to state 46
    lvalue      go to state 16
    condexp     go to state 17


state 21

   38 expseq: primyexp .

    $default  reduce using rule 38 (expseq)


state 22

    9 exp: LPAREN expseq . RPAREN
   39 expseq: expseq . SEMICOLON primyexp

    SEMICOLON  shift, and go to state 49
    RPAREN     shift, and go to state 50


state 23

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   27    | MINUS exp .

    $default  reduce using rule 27 (exp)


state 24

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   40 condexp: IF exp . THEN exp ELSE exp
   41        | IF exp . THEN exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40
    THEN    shift, and go to state 51


state 25

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   42 condexp: WHILE exp . DO exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40
    DO      shift, and go to state 52


state 26

   43 condexp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 53


state 27

   29 letexp: LET decs . IN expseq END
   45 decs: decs . dec

    IN        shift, and go to state 54
    FUNCTION  shift, and go to state 55
    VAR       shift, and go to state 56
    TYPE      shift, and go to state 57

    dec     go to state 58
    tydec   go to state 59
    vardec  go to state 60
    fundec  go to state 61


state 28

    0 $accept: program $end .

    $default  accept


state 29

   18 exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 62
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 30

   19 exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 63
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 31

   20 exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 64
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 32

   21 exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 65
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 33

   22 exp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 66
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 34

   23 exp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 67
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 35

   14 exp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 68
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 36

   16 exp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 69
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 37

   15 exp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 70
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 38

   17 exp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 71
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 39

   13 exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 72
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 40

   12 exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 73
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 41

   36 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 74
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 42

   37 lvalue: lvalue DOT . ID

    ID  shift, and go to state 75


state 43

   26 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 76
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 44

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   32 nonarglist: exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 32 (nonarglist)


state 45

    7 exp: ID LPAREN arglist . RPAREN

    RPAREN  shift, and go to state 77


state 46

   31 arglist: nonarglist .
   33 nonarglist: nonarglist . COMMA exp

    COMMA  shift, and go to state 78

    $default  reduce using rule 31 (arglist)


state 47

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   24    | ID LBRACK exp . RBRACK OF exp
   35 lvalue: ID LBRACK exp . RBRACK

    RBRACK  shift, and go to state 79
    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40


state 48

   25 exp: ID LBRACE arglist . RBRACE

    RBRACE  shift, and go to state 80


state 49

   39 expseq: expseq SEMICOLON . primyexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (primyexp)

    primyexp  go to state 81
    exp       go to state 14
    letexp    go to state 15
    lvalue    go to state 16
    condexp   go to state 17


state 50

    9 exp: LPAREN expseq RPAREN .

    $default  reduce using rule 9 (exp)


state 51

   40 condexp: IF exp THEN . exp ELSE exp
   41        | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 82
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 52

   42 condexp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 83
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 53

   43 condexp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 84
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 54

   29 letexp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 2 (primyexp)

    primyexp  go to state 21
    exp       go to state 14
    letexp    go to state 15
    lvalue    go to state 16
    expseq    go to state 85
    condexp   go to state 17


state 55

   60 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   61       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 86


state 56

   58 vardec: VAR . ID ASSIGN exp
   59       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 87


state 57

   49 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 88


state 58

   45 decs: decs dec .

    $default  reduce using rule 45 (decs)


state 59

   46 dec: tydec .

    $default  reduce using rule 46 (dec)


state 60

   47 dec: vardec .

    $default  reduce using rule 47 (dec)


state 61

   48 dec: fundec .

    $default  reduce using rule 48 (dec)


state 62

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   18    | exp PLUS exp .
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    $default  reduce using rule 18 (exp)


state 63

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   19    | exp MINUS exp .
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    $default  reduce using rule 19 (exp)


state 64

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   20    | exp TIMES exp .
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    $default  reduce using rule 20 (exp)


state 65

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   21    | exp DIVIDE exp .
   22    | exp . EQ exp
   23    | exp . NEQ exp

    $default  reduce using rule 21 (exp)


state 66

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   22    | exp EQ exp .
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 22 (exp)


state 67

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   23    | exp NEQ exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 23 (exp)


state 68

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   14    | exp LT exp .
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 14 (exp)


state 69

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   16    | exp LE exp .
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 16 (exp)


state 70

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   15    | exp GT exp .
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 15 (exp)


state 71

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   17    | exp GE exp .
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 17 (exp)


state 72

   12 exp: exp . OR exp
   13    | exp . AND exp
   13    | exp AND exp .
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38

    $default  reduce using rule 13 (exp)


state 73

   12 exp: exp . OR exp
   12    | exp OR exp .
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39

    $default  reduce using rule 12 (exp)


state 74

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   36 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 89
    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40


state 75

   37 lvalue: lvalue DOT ID .

    $default  reduce using rule 37 (lvalue)


state 76

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   26    | lvalue ASSIGN exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 26 (exp)


state 77

    7 exp: ID LPAREN arglist RPAREN .

    $default  reduce using rule 7 (exp)


state 78

   33 nonarglist: nonarglist COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 90
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 79

   24 exp: ID LBRACK exp RBRACK . OF exp
   35 lvalue: ID LBRACK exp RBRACK .

    OF  shift, and go to state 91

    $default  reduce using rule 35 (lvalue)


state 80

   25 exp: ID LBRACE arglist RBRACE .

    $default  reduce using rule 25 (exp)


state 81

   39 expseq: expseq SEMICOLON primyexp .

    $default  reduce using rule 39 (expseq)


state 82

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   40 condexp: IF exp THEN exp . ELSE exp
   41        | IF exp THEN exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40
    ELSE    shift, and go to state 92

    $default  reduce using rule 41 (condexp)


state 83

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   42 condexp: WHILE exp DO exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 42 (condexp)


state 84

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   43 condexp: FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40
    TO      shift, and go to state 93


state 85

   29 letexp: LET decs IN expseq . END
   39 expseq: expseq . SEMICOLON primyexp

    SEMICOLON  shift, and go to state 49
    END        shift, and go to state 94


state 86

   60 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   61       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 95


state 87

   58 vardec: VAR ID . ASSIGN exp
   59       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 96
    ASSIGN  shift, and go to state 97


state 88

   49 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 98


state 89

   36 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 36 (lvalue)


state 90

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   33 nonarglist: nonarglist COMMA exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 33 (nonarglist)


state 91

   24 exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 99
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 92

   40 condexp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 100
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 93

   43 condexp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 101
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 94

   29 letexp: LET decs IN expseq END .

    $default  reduce using rule 29 (letexp)


state 95

   60 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   61       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 102

    $default  reduce using rule 53 (tyfields)

    tyfields   go to state 103
    tyfields1  go to state 104
    tyfield    go to state 105


state 96

   59 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 106


state 97

   58 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 107
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 98

   49 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 108
    LBRACE  shift, and go to state 109
    ARRAY   shift, and go to state 110

    ty  go to state 111


state 99

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   24    | ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 24 (exp)


state 100

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   40 condexp: IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 40 (condexp)


state 101

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   43 condexp: FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40
    DO      shift, and go to state 112


state 102

   57 tyfield: ID . COLON ID

    COLON  shift, and go to state 113


state 103

   60 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   61       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 114


state 104

   54 tyfields: tyfields1 .
   56 tyfields1: tyfields1 . COMMA tyfield

    COMMA  shift, and go to state 115

    $default  reduce using rule 54 (tyfields)


state 105

   55 tyfields1: tyfield .

    $default  reduce using rule 55 (tyfields1)


state 106

   59 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 116


state 107

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   58 vardec: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 58 (vardec)


state 108

   50 ty: ID .

    $default  reduce using rule 50 (ty)


state 109

   51 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 102

    $default  reduce using rule 53 (tyfields)

    tyfields   go to state 117
    tyfields1  go to state 104
    tyfield    go to state 105


state 110

   52 ty: ARRAY . OF ID

    OF  shift, and go to state 118


state 111

   49 tydec: TYPE ID EQ ty .

    $default  reduce using rule 49 (tydec)


state 112

   43 condexp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 119
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 113

   57 tyfield: ID COLON . ID

    ID  shift, and go to state 120


state 114

   60 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   61       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 121
    EQ     shift, and go to state 122


state 115

   56 tyfields1: tyfields1 COMMA . tyfield

    ID  shift, and go to state 102

    tyfield  go to state 123


state 116

   59 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 124
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 117

   51 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 125


state 118

   52 ty: ARRAY OF . ID

    ID  shift, and go to state 126


state 119

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   43 condexp: FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 43 (condexp)


state 120

   57 tyfield: ID COLON ID .

    $default  reduce using rule 57 (tyfield)


state 121

   61 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 127


state 122

   60 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 128
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 123

   56 tyfields1: tyfields1 COMMA tyfield .

    $default  reduce using rule 56 (tyfields1)


state 124

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   59 vardec: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 59 (vardec)


state 125

   51 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 51 (ty)


state 126

   52 ty: ARRAY OF ID .

    $default  reduce using rule 52 (ty)


state 127

   61 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 129


state 128

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   60 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 60 (fundec)


state 129

   61 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp      go to state 130
    letexp   go to state 15
    lvalue   go to state 16
    condexp  go to state 17


state 130

   12 exp: exp . OR exp
   13    | exp . AND exp
   14    | exp . LT exp
   15    | exp . GT exp
   16    | exp . LE exp
   17    | exp . GE exp
   18    | exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . TIMES exp
   21    | exp . DIVIDE exp
   22    | exp . EQ exp
   23    | exp . NEQ exp
   61 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    PLUS    shift, and go to state 29
    MINUS   shift, and go to state 30
    TIMES   shift, and go to state 31
    DIVIDE  shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LT      shift, and go to state 35
    LE      shift, and go to state 36
    GT      shift, and go to state 37
    GE      shift, and go to state 38
    AND     shift, and go to state 39
    OR      shift, and go to state 40

    $default  reduce using rule 61 (fundec)
