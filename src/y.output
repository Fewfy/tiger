State 1 conflicts: 1 shift/reduce
State 61 conflicts: 8 shift/reduce
State 62 conflicts: 8 shift/reduce
State 63 conflicts: 8 shift/reduce
State 64 conflicts: 8 shift/reduce
State 65 conflicts: 8 shift/reduce
State 66 conflicts: 8 shift/reduce
State 67 conflicts: 8 shift/reduce
State 68 conflicts: 8 shift/reduce
State 80 conflicts: 8 shift/reduce
State 96 conflicts: 8 shift/reduce
State 97 conflicts: 8 shift/reduce
State 116 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: /* empty */
    3    | NIL
    4    | STRING
    5    | intexp
    6    | cmpexp
    7    | boolexp
    8    | LPAREN expseq RPAREN
    9    | funcall
   10    | arraycreate
   11    | condexp
   12    | LET decs IN expseq END
   13    | BREAK

   14 arglist: exp
   15        | arglist COMMA exp

   16 arraycreate: ID LBRACK exp RBRACK OF exp

   17 boolexp: exp AND exp
   18        | exp OR exp

   19 cmpexp: exp LT exp
   20       | exp GT exp
   21       | exp LE exp
   22       | exp GE exp
   23       | exp EQ exp
   24       | exp NEQ exp

   25 condexp: IF intexp THEN exp ELSE exp
   26        | WHILE boolexp DO exp
   27        | FOR ID ASSIGN intexp TO intexp DO exp

   28 intexp: INT
   29       | lvalue
   30       | intexp PLUS intexp
   31       | intexp MINUS intexp
   32       | intexp TIMES intexp
   33       | intexp DIVIDE intexp

   34 funcall: ID LPAREN arglist RPAREN

   35 expseq: exp
   36       | expseq SEMICOLON exp

   37 decs: /* empty */
   38     | decs dec

   39 dec: tydec
   40    | vardec
   41    | fundec

   42 lvalue: ID
   43       | lvalue DOT ID
   44       | lvalue LBRACK exp RBRACK

   45 tydec: TYPE ID EQ ty

   46 ty: ID
   47   | LBRACE tyfields RBRACE
   48   | ARRAY OF ID

   49 tyfields: /* empty */
   50         | tyfields1

   51 tyfields1: tyfield
   52          | tyfields1 COMMA tyfield

   53 tyfield: ID COLON ID

   54 vardec: VAR ID ASSIGN exp
   55       | VAR ID COLON ID ASSIGN exp

   56 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   57       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 16 27 34 42 43 45 46 48 53 54 55 56 57
STRING (259) 4
INT (260) 28
COMMA (261) 15 52
COLON (262) 53 55 57
SEMICOLON (263) 36
LPAREN (264) 8 34 56 57
RPAREN (265) 8 34 56 57
LBRACK (266) 16 44
RBRACK (267) 16 44
LBRACE (268) 47
RBRACE (269) 47
DOT (270) 43
PLUS (271) 30
MINUS (272) 31
TIMES (273) 32
DIVIDE (274) 33
EQ (275) 23 45 56 57
NEQ (276) 24
LT (277) 19
LE (278) 21
GT (279) 20
GE (280) 22
AND (281) 17
OR (282) 18
ASSIGN (283) 27 54 55
ARRAY (284) 48
IF (285) 25
THEN (286) 25
ELSE (287) 25
WHILE (288) 26
FOR (289) 27
TO (290) 27
DO (291) 26 27
LET (292) 12
IN (293) 12
END (294) 12
OF (295) 16 48
BREAK (296) 13
NIL (297) 3
FUNCTION (298) 56 57
VAR (299) 54 55
TYPE (300) 45


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
exp (48)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13, on right: 1 14 15 16 17 18
    19 20 21 22 23 24 25 26 27 35 36 44 54 55 56 57
arglist (49)
    on left: 14 15, on right: 15 34
arraycreate (50)
    on left: 16, on right: 10
boolexp (51)
    on left: 17 18, on right: 7 26
cmpexp (52)
    on left: 19 20 21 22 23 24, on right: 6
condexp (53)
    on left: 25 26 27, on right: 11
intexp (54)
    on left: 28 29 30 31 32 33, on right: 5 25 27 30 31 32 33
funcall (55)
    on left: 34, on right: 9
expseq (56)
    on left: 35 36, on right: 8 12 36
decs (57)
    on left: 37 38, on right: 12 38
dec (58)
    on left: 39 40 41, on right: 38
lvalue (59)
    on left: 42 43 44, on right: 29 43 44
tydec (60)
    on left: 45, on right: 39
ty (61)
    on left: 46 47 48, on right: 45
tyfields (62)
    on left: 49 50, on right: 47 56 57
tyfields1 (63)
    on left: 51 52, on right: 50 52
tyfield (64)
    on left: 53, on right: 51 52
vardec (65)
    on left: 54 55, on right: 40
fundec (66)
    on left: 56 57, on right: 41


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    program      go to state 11
    exp          go to state 12
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 1

   16 arraycreate: ID . LBRACK exp RBRACK OF exp
   34 funcall: ID . LPAREN arglist RPAREN
   42 lvalue: ID .

    LPAREN  shift, and go to state 20
    LBRACK  shift, and go to state 21

    LBRACK    [reduce using rule 42 (lvalue)]
    $default  reduce using rule 42 (lvalue)


state 2

    4 exp: STRING .

    $default  reduce using rule 4 (exp)


state 3

   28 intexp: INT .

    $default  reduce using rule 28 (intexp)


state 4

    8 exp: LPAREN . expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 22
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    expseq       go to state 23
    lvalue       go to state 19


state 5

   25 condexp: IF . intexp THEN exp ELSE exp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 25
    lvalue  go to state 19


state 6

   26 condexp: WHILE . boolexp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 26
    arraycreate  go to state 13
    boolexp      go to state 27
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 7

   27 condexp: FOR . ID ASSIGN intexp TO intexp DO exp

    ID  shift, and go to state 28


state 8

   12 exp: LET . decs IN expseq END

    $default  reduce using rule 37 (decs)

    decs  go to state 29


state 9

   13 exp: BREAK .

    $default  reduce using rule 13 (exp)


state 10

    3 exp: NIL .

    $default  reduce using rule 3 (exp)


state 11

    0 $accept: program . $end

    $end  shift, and go to state 30


state 12

    1 program: exp .
   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 1 (program)


state 13

   10 exp: arraycreate .

    $default  reduce using rule 10 (exp)


state 14

    7 exp: boolexp .

    $default  reduce using rule 7 (exp)


state 15

    6 exp: cmpexp .

    $default  reduce using rule 6 (exp)


state 16

   11 exp: condexp .

    $default  reduce using rule 11 (exp)


state 17

    5 exp: intexp .
   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    PLUS    shift, and go to state 39
    MINUS   shift, and go to state 40
    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42

    $default  reduce using rule 5 (exp)


state 18

    9 exp: funcall .

    $default  reduce using rule 9 (exp)


state 19

   29 intexp: lvalue .
   43 lvalue: lvalue . DOT ID
   44       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 43
    DOT     shift, and go to state 44

    $default  reduce using rule 29 (intexp)


state 20

   34 funcall: ID LPAREN . arglist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 45
    arglist      go to state 46
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 21

   16 arraycreate: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 47
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 22

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   35 expseq: exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 35 (expseq)


state 23

    8 exp: LPAREN expseq . RPAREN
   36 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 48
    RPAREN     shift, and go to state 49


state 24

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


state 25

   25 condexp: IF intexp . THEN exp ELSE exp
   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    PLUS    shift, and go to state 39
    MINUS   shift, and go to state 40
    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42
    THEN    shift, and go to state 50


state 26

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38


state 27

    7 exp: boolexp .
   26 condexp: WHILE boolexp . DO exp

    DO  shift, and go to state 51

    $default  reduce using rule 7 (exp)


state 28

   27 condexp: FOR ID . ASSIGN intexp TO intexp DO exp

    ASSIGN  shift, and go to state 52


state 29

   12 exp: LET decs . IN expseq END
   38 decs: decs . dec

    IN        shift, and go to state 53
    FUNCTION  shift, and go to state 54
    VAR       shift, and go to state 55
    TYPE      shift, and go to state 56

    dec     go to state 57
    tydec   go to state 58
    vardec  go to state 59
    fundec  go to state 60


state 30

    0 $accept: program $end .

    $default  accept


state 31

   23 cmpexp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 61
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 32

   24 cmpexp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 62
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 33

   19 cmpexp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 63
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 34

   21 cmpexp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 64
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 35

   20 cmpexp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 65
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 36

   22 cmpexp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 66
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 37

   17 boolexp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 67
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 38

   18 boolexp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 68
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 39

   30 intexp: intexp PLUS . intexp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 69
    lvalue  go to state 19


state 40

   31 intexp: intexp MINUS . intexp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 70
    lvalue  go to state 19


state 41

   32 intexp: intexp TIMES . intexp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 71
    lvalue  go to state 19


state 42

   33 intexp: intexp DIVIDE . intexp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 72
    lvalue  go to state 19


state 43

   44 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 73
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 44

   43 lvalue: lvalue DOT . ID

    ID  shift, and go to state 74


state 45

   14 arglist: exp .
   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 14 (arglist)


state 46

   15 arglist: arglist . COMMA exp
   34 funcall: ID LPAREN arglist . RPAREN

    COMMA   shift, and go to state 75
    RPAREN  shift, and go to state 76


state 47

   16 arraycreate: ID LBRACK exp . RBRACK OF exp
   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    RBRACK  shift, and go to state 77
    EQ      shift, and go to state 31
    NEQ     shift, and go to state 32
    LT      shift, and go to state 33
    LE      shift, and go to state 34
    GT      shift, and go to state 35
    GE      shift, and go to state 36
    AND     shift, and go to state 37
    OR      shift, and go to state 38


state 48

   36 expseq: expseq SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 78
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 49

    8 exp: LPAREN expseq RPAREN .

    $default  reduce using rule 8 (exp)


state 50

   25 condexp: IF intexp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 79
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 51

   26 condexp: WHILE boolexp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 80
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 52

   27 condexp: FOR ID ASSIGN . intexp TO intexp DO exp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 81
    lvalue  go to state 19


state 53

   12 exp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 22
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    expseq       go to state 82
    lvalue       go to state 19


state 54

   56 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   57       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 83


state 55

   54 vardec: VAR . ID ASSIGN exp
   55       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 84


state 56

   45 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 85


state 57

   38 decs: decs dec .

    $default  reduce using rule 38 (decs)


state 58

   39 dec: tydec .

    $default  reduce using rule 39 (dec)


state 59

   40 dec: vardec .

    $default  reduce using rule 40 (dec)


state 60

   41 dec: fundec .

    $default  reduce using rule 41 (dec)


state 61

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   23       | exp EQ exp .
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 23 (cmpexp)]
    NEQ       [reduce using rule 23 (cmpexp)]
    LT        [reduce using rule 23 (cmpexp)]
    LE        [reduce using rule 23 (cmpexp)]
    GT        [reduce using rule 23 (cmpexp)]
    GE        [reduce using rule 23 (cmpexp)]
    AND       [reduce using rule 23 (cmpexp)]
    OR        [reduce using rule 23 (cmpexp)]
    $default  reduce using rule 23 (cmpexp)


state 62

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   24       | exp NEQ exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 24 (cmpexp)]
    NEQ       [reduce using rule 24 (cmpexp)]
    LT        [reduce using rule 24 (cmpexp)]
    LE        [reduce using rule 24 (cmpexp)]
    GT        [reduce using rule 24 (cmpexp)]
    GE        [reduce using rule 24 (cmpexp)]
    AND       [reduce using rule 24 (cmpexp)]
    OR        [reduce using rule 24 (cmpexp)]
    $default  reduce using rule 24 (cmpexp)


state 63

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   19       | exp LT exp .
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 19 (cmpexp)]
    NEQ       [reduce using rule 19 (cmpexp)]
    LT        [reduce using rule 19 (cmpexp)]
    LE        [reduce using rule 19 (cmpexp)]
    GT        [reduce using rule 19 (cmpexp)]
    GE        [reduce using rule 19 (cmpexp)]
    AND       [reduce using rule 19 (cmpexp)]
    OR        [reduce using rule 19 (cmpexp)]
    $default  reduce using rule 19 (cmpexp)


state 64

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   21       | exp LE exp .
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 21 (cmpexp)]
    NEQ       [reduce using rule 21 (cmpexp)]
    LT        [reduce using rule 21 (cmpexp)]
    LE        [reduce using rule 21 (cmpexp)]
    GT        [reduce using rule 21 (cmpexp)]
    GE        [reduce using rule 21 (cmpexp)]
    AND       [reduce using rule 21 (cmpexp)]
    OR        [reduce using rule 21 (cmpexp)]
    $default  reduce using rule 21 (cmpexp)


state 65

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   20       | exp GT exp .
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 20 (cmpexp)]
    NEQ       [reduce using rule 20 (cmpexp)]
    LT        [reduce using rule 20 (cmpexp)]
    LE        [reduce using rule 20 (cmpexp)]
    GT        [reduce using rule 20 (cmpexp)]
    GE        [reduce using rule 20 (cmpexp)]
    AND       [reduce using rule 20 (cmpexp)]
    OR        [reduce using rule 20 (cmpexp)]
    $default  reduce using rule 20 (cmpexp)


state 66

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   22       | exp GE exp .
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 22 (cmpexp)]
    NEQ       [reduce using rule 22 (cmpexp)]
    LT        [reduce using rule 22 (cmpexp)]
    LE        [reduce using rule 22 (cmpexp)]
    GT        [reduce using rule 22 (cmpexp)]
    GE        [reduce using rule 22 (cmpexp)]
    AND       [reduce using rule 22 (cmpexp)]
    OR        [reduce using rule 22 (cmpexp)]
    $default  reduce using rule 22 (cmpexp)


state 67

   17 boolexp: exp . AND exp
   17        | exp AND exp .
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 17 (boolexp)]
    NEQ       [reduce using rule 17 (boolexp)]
    LT        [reduce using rule 17 (boolexp)]
    LE        [reduce using rule 17 (boolexp)]
    GT        [reduce using rule 17 (boolexp)]
    GE        [reduce using rule 17 (boolexp)]
    AND       [reduce using rule 17 (boolexp)]
    OR        [reduce using rule 17 (boolexp)]
    $default  reduce using rule 17 (boolexp)


state 68

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   18        | exp OR exp .
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 18 (boolexp)]
    NEQ       [reduce using rule 18 (boolexp)]
    LT        [reduce using rule 18 (boolexp)]
    LE        [reduce using rule 18 (boolexp)]
    GT        [reduce using rule 18 (boolexp)]
    GE        [reduce using rule 18 (boolexp)]
    AND       [reduce using rule 18 (boolexp)]
    OR        [reduce using rule 18 (boolexp)]
    $default  reduce using rule 18 (boolexp)


state 69

   30 intexp: intexp . PLUS intexp
   30       | intexp PLUS intexp .
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42

    $default  reduce using rule 30 (intexp)


state 70

   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   31       | intexp MINUS intexp .
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42

    $default  reduce using rule 31 (intexp)


state 71

   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   32       | intexp TIMES intexp .
   33       | intexp . DIVIDE intexp

    $default  reduce using rule 32 (intexp)


state 72

   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp
   33       | intexp DIVIDE intexp .

    $default  reduce using rule 33 (intexp)


state 73

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   44 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 86
    EQ      shift, and go to state 31
    NEQ     shift, and go to state 32
    LT      shift, and go to state 33
    LE      shift, and go to state 34
    GT      shift, and go to state 35
    GE      shift, and go to state 36
    AND     shift, and go to state 37
    OR      shift, and go to state 38


state 74

   43 lvalue: lvalue DOT ID .

    $default  reduce using rule 43 (lvalue)


state 75

   15 arglist: arglist COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 87
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 76

   34 funcall: ID LPAREN arglist RPAREN .

    $default  reduce using rule 34 (funcall)


state 77

   16 arraycreate: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 88


state 78

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   36 expseq: expseq SEMICOLON exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 36 (expseq)


state 79

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   25 condexp: IF intexp THEN exp . ELSE exp

    EQ    shift, and go to state 31
    NEQ   shift, and go to state 32
    LT    shift, and go to state 33
    LE    shift, and go to state 34
    GT    shift, and go to state 35
    GE    shift, and go to state 36
    AND   shift, and go to state 37
    OR    shift, and go to state 38
    ELSE  shift, and go to state 89


state 80

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   26 condexp: WHILE boolexp DO exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 26 (condexp)]
    NEQ       [reduce using rule 26 (condexp)]
    LT        [reduce using rule 26 (condexp)]
    LE        [reduce using rule 26 (condexp)]
    GT        [reduce using rule 26 (condexp)]
    GE        [reduce using rule 26 (condexp)]
    AND       [reduce using rule 26 (condexp)]
    OR        [reduce using rule 26 (condexp)]
    $default  reduce using rule 26 (condexp)


state 81

   27 condexp: FOR ID ASSIGN intexp . TO intexp DO exp
   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    PLUS    shift, and go to state 39
    MINUS   shift, and go to state 40
    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42
    TO      shift, and go to state 90


state 82

   12 exp: LET decs IN expseq . END
   36 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 48
    END        shift, and go to state 91


state 83

   56 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   57       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 92


state 84

   54 vardec: VAR ID . ASSIGN exp
   55       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 93
    ASSIGN  shift, and go to state 94


state 85

   45 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 95


state 86

   44 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 44 (lvalue)


state 87

   15 arglist: arglist COMMA exp .
   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 15 (arglist)


state 88

   16 arraycreate: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 96
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 89

   25 condexp: IF intexp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 97
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 90

   27 condexp: FOR ID ASSIGN intexp TO . intexp DO exp

    ID   shift, and go to state 24
    INT  shift, and go to state 3

    intexp  go to state 98
    lvalue  go to state 19


state 91

   12 exp: LET decs IN expseq END .

    $default  reduce using rule 12 (exp)


state 92

   56 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   57       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 99

    $default  reduce using rule 49 (tyfields)

    tyfields   go to state 100
    tyfields1  go to state 101
    tyfield    go to state 102


state 93

   55 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 103


state 94

   54 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 104
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 95

   45 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 105
    LBRACE  shift, and go to state 106
    ARRAY   shift, and go to state 107

    ty  go to state 108


state 96

   16 arraycreate: ID LBRACK exp RBRACK OF exp .
   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 16 (arraycreate)]
    NEQ       [reduce using rule 16 (arraycreate)]
    LT        [reduce using rule 16 (arraycreate)]
    LE        [reduce using rule 16 (arraycreate)]
    GT        [reduce using rule 16 (arraycreate)]
    GE        [reduce using rule 16 (arraycreate)]
    AND       [reduce using rule 16 (arraycreate)]
    OR        [reduce using rule 16 (arraycreate)]
    $default  reduce using rule 16 (arraycreate)


state 97

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   25 condexp: IF intexp THEN exp ELSE exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 25 (condexp)]
    NEQ       [reduce using rule 25 (condexp)]
    LT        [reduce using rule 25 (condexp)]
    LE        [reduce using rule 25 (condexp)]
    GT        [reduce using rule 25 (condexp)]
    GE        [reduce using rule 25 (condexp)]
    AND       [reduce using rule 25 (condexp)]
    OR        [reduce using rule 25 (condexp)]
    $default  reduce using rule 25 (condexp)


state 98

   27 condexp: FOR ID ASSIGN intexp TO intexp . DO exp
   30 intexp: intexp . PLUS intexp
   31       | intexp . MINUS intexp
   32       | intexp . TIMES intexp
   33       | intexp . DIVIDE intexp

    PLUS    shift, and go to state 39
    MINUS   shift, and go to state 40
    TIMES   shift, and go to state 41
    DIVIDE  shift, and go to state 42
    DO      shift, and go to state 109


state 99

   53 tyfield: ID . COLON ID

    COLON  shift, and go to state 110


state 100

   56 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   57       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 111


state 101

   50 tyfields: tyfields1 .
   52 tyfields1: tyfields1 . COMMA tyfield

    COMMA  shift, and go to state 112

    $default  reduce using rule 50 (tyfields)


state 102

   51 tyfields1: tyfield .

    $default  reduce using rule 51 (tyfields1)


state 103

   55 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 113


state 104

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   54 vardec: VAR ID ASSIGN exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 54 (vardec)


state 105

   46 ty: ID .

    $default  reduce using rule 46 (ty)


state 106

   47 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 99

    $default  reduce using rule 49 (tyfields)

    tyfields   go to state 114
    tyfields1  go to state 101
    tyfield    go to state 102


state 107

   48 ty: ARRAY . OF ID

    OF  shift, and go to state 115


state 108

   45 tydec: TYPE ID EQ ty .

    $default  reduce using rule 45 (tydec)


state 109

   27 condexp: FOR ID ASSIGN intexp TO intexp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 116
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 110

   53 tyfield: ID COLON . ID

    ID  shift, and go to state 117


state 111

   56 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   57       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 118
    EQ     shift, and go to state 119


state 112

   52 tyfields1: tyfields1 COMMA . tyfield

    ID  shift, and go to state 99

    tyfield  go to state 120


state 113

   55 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 121
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 114

   47 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 122


state 115

   48 ty: ARRAY OF . ID

    ID  shift, and go to state 123


state 116

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   27 condexp: FOR ID ASSIGN intexp TO intexp DO exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    EQ        [reduce using rule 27 (condexp)]
    NEQ       [reduce using rule 27 (condexp)]
    LT        [reduce using rule 27 (condexp)]
    LE        [reduce using rule 27 (condexp)]
    GT        [reduce using rule 27 (condexp)]
    GE        [reduce using rule 27 (condexp)]
    AND       [reduce using rule 27 (condexp)]
    OR        [reduce using rule 27 (condexp)]
    $default  reduce using rule 27 (condexp)


state 117

   53 tyfield: ID COLON ID .

    $default  reduce using rule 53 (tyfield)


state 118

   57 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 124


state 119

   56 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 125
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 120

   52 tyfields1: tyfields1 COMMA tyfield .

    $default  reduce using rule 52 (tyfields1)


state 121

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   55 vardec: VAR ID COLON ID ASSIGN exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 55 (vardec)


state 122

   47 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 47 (ty)


state 123

   48 ty: ARRAY OF ID .

    $default  reduce using rule 48 (ty)


state 124

   57 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 126


state 125

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   56 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 56 (fundec)


state 126

   57 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    $default  reduce using rule 2 (exp)

    exp          go to state 127
    arraycreate  go to state 13
    boolexp      go to state 14
    cmpexp       go to state 15
    condexp      go to state 16
    intexp       go to state 17
    funcall      go to state 18
    lvalue       go to state 19


state 127

   17 boolexp: exp . AND exp
   18        | exp . OR exp
   19 cmpexp: exp . LT exp
   20       | exp . GT exp
   21       | exp . LE exp
   22       | exp . GE exp
   23       | exp . EQ exp
   24       | exp . NEQ exp
   57 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36
    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 57 (fundec)
